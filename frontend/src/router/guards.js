// frontend/src/router/guards.js
import { useAuthStore } from '@/stores/auth'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞
const getLoginPath = (targetPath) => {
  if (targetPath.startsWith('/admin')) {
    return '/admin/login'
  } else if (targetPath.startsWith('/worker')) {
    return '/worker/login'
  }
  return '/login'
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getDashboardPath = (user) => {
  if (!user) return '/home'

  console.log('[Guards] Getting dashboard for user:', user)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
  if (user.role === 'admin' || user.is_superuser === true || user.is_superuser === 1) {
    console.log('[Guards] Redirecting to admin dashboard')
    return '/admin/dashboard'
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
  if (user.role === 'city_worker') {
    console.log('[Guards] Redirecting to worker dashboard')
    return '/worker/dashboard'
  }

  console.log('[Guards] Default redirect to home')
  return '/home'
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ
const canAccessAdmin = (user) => {
  if (!user) return false
  console.log('[Guards] Checking admin access for user:', user)
  const hasAccess = user.role === 'admin' || user.is_superuser === true || user.is_superuser === 1
  console.log('[Guards] Admin access result:', hasAccess)
  return hasAccess
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–±–æ—á–µ–π –ø–∞–Ω–µ–ª–∏
const canAccessWorker = (user) => {
  if (!user) return false
  console.log('[Guards] Checking worker access for user:', user)
  const hasAccess = user.role === 'city_worker'
  console.log('[Guards] Worker access result:', hasAccess)
  return hasAccess
}

export const setupRouterGuards = (router) => {
  router.beforeEach(async (to, from, next) => {
    console.log(`[Router] Navigating from ${from.path} to: ${to.path}`)

    const authStore = useAuthStore()

    // üî• –î–û–ñ–ò–î–ê–ï–ú–°–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò STORE
    if (!authStore.isInitialized) {
      console.log('[Router] Waiting for auth store initialization...')
      await authStore.initialize()
    }

    console.log('[Router] Auth state:', {
      isAuthenticated: authStore.isAuthenticated,
      user: authStore.user,
      hasToken: authStore.hasToken
    })

    // üî• –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–†–ê–ù–ò–¶ –õ–û–ì–ò–ù–ê - –ü–†–ï–î–û–¢–í–†–ê–©–ê–ï–ú –ë–ï–°–ö–û–ù–ï–ß–ù–´–ï –†–ï–î–ò–†–ï–ö–¢–´
    const loginPaths = ['/login', '/admin/login', '/worker/login']
    if (loginPaths.includes(to.path)) {
      console.log('[Router] Login page detected:', to.path)

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¥–∞—à–±–æ—Ä–¥
      if (authStore.isAuthenticated) {
        const dashboardPath = getDashboardPath(authStore.user)
        console.log('[Router] User already authenticated, redirecting to:', dashboardPath)
        return next(dashboardPath)
      }

      // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞
      console.log('[Router] Allowing access to login page')
      return next()
    }

    // üî• –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–†–ù–ï–í–û–ì–û –ú–ê–†–®–†–£–¢–ê
    if (to.path === '/' || to.name === 'Root') {
      console.log('[Router] Root path detected')

      if (!authStore.isAuthenticated) {
        console.log('[Router] Not authenticated, redirecting to login')
        return next('/login')
      }

      const dashboardPath = getDashboardPath(authStore.user)
      console.log('[Router] Authenticated, redirecting to:', dashboardPath)
      return next(dashboardPath)
    }

    // üî• –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –í–°–ï–• –ê–î–ú–ò–ù–°–ö–ò–• –ú–ê–†–®–†–£–¢–û–í
    if (to.path.startsWith('/admin') && to.path !== '/admin/login') {
      console.log('[Router] Admin area access detected:', to.path)

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
      if (!authStore.isAuthenticated) {
        console.log('[Router] Not authenticated, redirecting to admin login')
        return next('/admin/login')
      }

      // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      if (!canAccessAdmin(authStore.user)) {
        console.log('[Router] User cannot access admin area, user:', authStore.user)
        console.log('[Router] Current user is authenticated but not admin - logging out and redirecting to admin login')

        // üî• –†–ê–ó–õ–û–ì–ò–ù–ò–í–ê–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–Ø–ï–ú –ù–ê –ê–î–ú–ò–ù–°–ö–ò–ô –õ–û–ì–ò–ù
        authStore.logout()
        return next('/admin/login')
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ /admin
      if (to.path === '/admin') {
        console.log('[Router] Direct /admin access, redirecting to dashboard')
        return next('/admin/dashboard')
      }

      console.log('[Router] Admin access granted to:', to.path)
      return next()
    }

    // üî• –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –í–°–ï–• –†–ê–ë–û–ß–ò–• –ú–ê–†–®–†–£–¢–û–í
    if (to.path.startsWith('/worker') && to.path !== '/worker/login') {
      console.log('[Router] Worker area access detected:', to.path)

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
      if (!authStore.isAuthenticated) {
        console.log('[Router] Not authenticated, redirecting to worker login')
        return next('/worker/login')
      }

      // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      if (!canAccessWorker(authStore.user)) {
        console.log('[Router] User cannot access worker area, user:', authStore.user)
        console.log('[Router] Current user is authenticated but not worker - logging out and redirecting to worker login')

        // üî• –†–ê–ó–õ–û–ì–ò–ù–ò–í–ê–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–Ø–ï–ú –ù–ê –†–ê–ë–û–ß–ò–ô –õ–û–ì–ò–ù
        authStore.logout()
        return next('/worker/login')
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ /worker
      if (to.path === '/worker') {
        console.log('[Router] Direct /worker access, redirecting to dashboard')
        return next('/worker/dashboard')
      }

      console.log('[Router] Worker access granted to:', to.path)
      return next()
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
    if (to.meta.requiresAuth && !authStore.isAuthenticated) {
      console.log('[Router] Route requires auth, redirecting to appropriate login')
      const loginPath = getLoginPath(to.path)
      return next(loginPath)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
    if (to.meta.requiresRole) {
      const requiredRole = to.meta.requiresRole

      if (!authStore.hasRole(requiredRole)) {
        console.log(`[Router] Role check failed. Required: ${requiredRole}, User role:`, authStore.user?.role)

        if (!authStore.isAuthenticated) {
          const loginPath = getLoginPath(to.path)
          return next(loginPath)
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ —Ä–æ–ª—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ home
        console.log(`[Router] Role mismatch, redirecting to home`)
        return next('/home')
      }
    }

    console.log('[Router] Navigation approved')
    next()
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  router.onError((error) => {
    console.error('[Router] Navigation error:', error)

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    if (error.message.includes('Infinite redirect')) {
      console.error('[Router] Infinite redirect detected, stopping navigation')
      return
    }

    if (error.message.includes('auth') || error.message.includes('401')) {
      const authStore = useAuthStore()
      authStore.logout()
      router.push('/login')
    }
  })
}