// frontend/src/services/admin.js
import apiClient from './client.js'

export const adminAPI = {
  // ==============================================
  // –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –î–ê–®–ë–û–†–î
  // ==============================================

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
   */
  async getStatistics() {
    try {
      const response = await apiClient.get('/admin/statistics/')
      return response
    } catch (error) {
      console.error('‚ùå Get statistics error:', error)
      throw error
    }
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   * @param {string} params.period - –ü–µ—Ä–∏–æ–¥ (day, week, month)
   * @param {string} params.start_date - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
   * @param {string} params.end_date - –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
   * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  async getAnalytics(params = {}) {
    try {
      const response = await apiClient.get('/admin/analytics/', { params })
      return response
    } catch (error) {
      console.error('‚ùå Get analytics error:', error)
      throw error
    }
  },

  // ==============================================
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
  // ==============================================

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   * @param {number} params.page - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   * @param {number} params.limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
   * @param {string} params.search - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
   * @param {string} params.role - –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async getUsers(params = {}) {
    try {
      const response = await apiClient.get('/admin/users/', { params })
      return response
    } catch (error) {
      console.error('‚ùå Get users error:', error)
      throw error
    }
  },

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} userData - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userData.username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userData.email - Email
   * @param {string} userData.password - –ü–∞—Ä–æ–ª—å
   * @param {string} userData.first_name - –ò–º—è
   * @param {string} userData.last_name - –§–∞–º–∏–ª–∏—è
   * @param {string} userData.role - –†–æ–ª—å
   * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   */
  async createUser(userData) {
    try {
      const response = await apiClient.post('/admin/users/', userData)
      console.log('‚úÖ User created successfully')
      return response
    } catch (error) {
      console.error('‚ùå Create user error:', error)
      throw error
    }
  },

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} userData - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   */
  async updateUser(userId, userData) {
    try {
      const response = await apiClient.patch(`/admin/users/${userId}/`, userData)
      console.log('‚úÖ User updated successfully')
      return response
    } catch (error) {
      console.error('‚ùå Update user error:', error)
      throw error
    }
  },

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
   */
  async deleteUser(userId) {
    try {
      const response = await apiClient.delete(`/admin/users/${userId}/`)
      console.log('‚úÖ User deleted successfully')
      return response
    } catch (error) {
      console.error('‚ùå Delete user error:', error)
      throw error
    }
  },

  /**
   * –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {boolean} isActive - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async toggleUserStatus(userId, isActive) {
    try {
      const response = await apiClient.patch(`/admin/users/${userId}/`, { is_active: isActive })
      console.log(`‚úÖ User ${isActive ? 'activated' : 'deactivated'} successfully`)
      return response
    } catch (error) {
      console.error('‚ùå Toggle user status error:', error)
      throw error
    }
  },

  // ==============================================
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ù–ò–ö–ê–ú–ò
  // ==============================================

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   * @param {number} params.page - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   * @param {string} params.search - –ü–æ–∏—Å–∫
   * @param {string} params.city - –ì–æ—Ä–æ–¥
   * @param {boolean} params.is_active - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
   * @returns {Promise<Object>} –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
   */
  async getWorkers(params = {}) {
    try {
      const response = await apiClient.get('/admin/workers/', { params })
      return {
        data: response.data || [],
        ...response
      }
    } catch (error) {
      console.error('‚ùå Get workers error:', error)
      return { data: [] }
    }
  },

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
   * @param {Object} workerData - –î–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
   * @param {string} workerData.username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} workerData.email - Email
   * @param {string} workerData.password - –ü–∞—Ä–æ–ª—å
   * @param {string} workerData.city_name - –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
   * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫
   */
  async createWorker(workerData) {
    try {
      const payload = {
        username: workerData.username,
        email: workerData.email || '',
        first_name: workerData.first_name || '',
        last_name: workerData.last_name || '',
        phone: workerData.phone || '',
        password: workerData.password,
        password_confirm: workerData.password_confirm,
        city_name: workerData.city_name,
        is_worker_active: workerData.is_worker_active !== undefined ? workerData.is_worker_active : true
      }

      console.log('üöÄ Creating worker with payload:', payload)
      const response = await apiClient.post('/admin/workers/', payload)
      console.log('‚úÖ Worker created successfully:', response.data)
      return response
    } catch (error) {
      console.error('‚ùå Create worker error:', error)

      // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (error.response) {
        console.error('üìã Error response data:', error.response.data)
        console.error('üìã Error response status:', error.response.status)
        console.error('üìã Error response headers:', error.response.headers)

        // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –æ—à–∏–±–∫—É
        const enhancedError = new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞')
        enhancedError.response = error.response
        enhancedError.data = error.response.data
        enhancedError.status = error.response.status

        throw enhancedError
      } else if (error.request) {
        console.error('üìã Error request:', error.request)
        throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞')
      } else {
        console.error('üìã Error message:', error.message)
        throw error
      }
    }
  },

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
   * @param {number} workerId - ID —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
   * @param {Object} workerData - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫
   */
  async updateWorker(workerId, workerData) {
    try {
      const payload = {
        username: workerData.username,
        email: workerData.email || '',
        first_name: workerData.first_name || '',
        last_name: workerData.last_name || '',
        city_name: workerData.city_name,
        phone: workerData.phone || '',
        is_worker_active: workerData.is_worker_active
      }

      if (workerData.password) {
        payload.password = workerData.password
        payload.password_confirm = workerData.password_confirm
      }

      console.log('üöÄ Updating worker with payload:', payload)
      const response = await apiClient.patch(`/admin/workers/${workerId}/`, payload)
      console.log('‚úÖ Worker updated successfully:', response.data)
      return response
    } catch (error) {
      console.error('‚ùå Update worker error:', error)

      // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (error.response) {
        console.error('üìã Error response data:', error.response.data)
        console.error('üìã Error response status:', error.response.status)

        const enhancedError = new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞')
        enhancedError.response = error.response
        enhancedError.data = error.response.data
        enhancedError.status = error.response.status

        throw enhancedError
      } else if (error.request) {
        console.error('üìã Error request:', error.request)
        throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞')
      } else {
        console.error('üìã Error message:', error.message)
        throw error
      }
    }
  },

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
   * @param {number} workerId - ID —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
   */
  async deleteWorker(workerId) {
    try {
      const response = await apiClient.delete(`/admin/workers/${workerId}/`)
      console.log('‚úÖ Worker deleted successfully')
      return response
    } catch (error) {
      console.error('‚ùå Delete worker error:', error)
      throw error
    }
  },

  // ==============================================
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ì–û–†–û–î–ê–ú–ò
  // ==============================================

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
   * @returns {Promise<Object>} –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
   */
  async getCities() {
    try {
      const response = await apiClient.get('/cities/')
      return response
    } catch (error) {
      console.error('‚ùå Get cities error:', error)
      throw error
    }
  },

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
   * @param {Object} cityData - –î–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
   * @param {string} cityData.name - –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
   * @param {boolean} cityData.is_active - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
   * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
   */
  async createCity(cityData) {
    try {
      const response = await apiClient.post('/admin/cities/', cityData)
      console.log('‚úÖ City created successfully')
      return response
    } catch (error) {
      console.error('‚ùå Create city error:', error)
      throw error
    }
  },

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞
   * @param {number} cityId - ID –≥–æ—Ä–æ–¥–∞
   * @param {Object} cityData - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
   */
  async updateCity(cityId, cityData) {
    try {
      const response = await apiClient.patch(`/admin/cities/${cityId}/`, cityData)
      console.log('‚úÖ City updated successfully')
      return response
    } catch (error) {
      console.error('‚ùå Update city error:', error)
      throw error
    }
  },

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
   * @param {number} cityId - ID –≥–æ—Ä–æ–¥–∞
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
   */
  async deleteCity(cityId) {
    try {
      const response = await apiClient.delete(`/admin/cities/${cityId}/`)
      console.log('‚úÖ City deleted successfully')
      return response
    } catch (error) {
      console.error('‚ùå Delete city error:', error)
      throw error
    }
  },

  // ==============================================
  // –ë–ê–ù–ö–û–í–°–ö–ò–ï –ö–£–†–°–´
  // ==============================================

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫—É—Ä—Å–æ–≤
   * @returns {Promise<Object>} –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫—É—Ä—Å—ã
   */
  async getBankRates() {
    try {
      const response = await apiClient.get('/public/bank-rates/')
      return response
    } catch (error) {
      console.error('‚ùå Get bank rates error:', error)
      throw error
    }
  },

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫—É—Ä—Å–æ–≤
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  async updateBankRates() {
    try {
      const response = await apiClient.post('/public/bank-rates/update/')
      console.log('‚úÖ Bank rates updated successfully')
      return response
    } catch (error) {
      console.error('‚ùå Update bank rates error:', error)
      throw error
    }
  },

  // ==============================================
  // –õ–û–ì–ò –ò –ê–ö–¢–ò–í–ù–û–°–¢–¨
  // ==============================================

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   * @param {number} params.page - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   * @param {string} params.worker_id - ID —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
   * @param {string} params.date_from - –î–∞—Ç–∞ —Å
   * @param {string} params.date_to - –î–∞—Ç–∞ –ø–æ
   * @returns {Promise<Object>} –õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  async getActivityLogs(params = {}) {
    try {
      const response = await apiClient.get('/admin/worker-activity/', { params })
      return response
    } catch (error) {
      console.error('‚ùå Get activity logs error:', error)
      throw error
    }
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   * @returns {Promise<Object>} –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏
   */
  async getSystemLogs(params = {}) {
    try {
      const response = await apiClient.get('/admin/system-logs/', { params })
      return response
    } catch (error) {
      console.error('‚ùå Get system logs error:', error)
      throw error
    }
  },

  // ==============================================
  // –ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´
  // ==============================================

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã
   * @returns {Promise<Object>} –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
   */
  async getSettings() {
    try {
      const response = await apiClient.get('/admin/settings/')
      return response
    } catch (error) {
      console.error('‚ùå Get settings error:', error)
      throw error
    }
  },

  // ==============================================
  // –†–´–ù–û–ß–ù–´–ï –ö–£–†–°–´
  // ==============================================

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   * @param {number} params.page - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   * @param {string} params.city - –ì–æ—Ä–æ–¥
   * @param {string} params.date - –î–∞—Ç–∞
   * @returns {Promise<Object>} –†—ã–Ω–æ—á–Ω—ã–µ –∫—É—Ä—Å—ã
   */
  async getMarketRates(params = {}) {
    try {
      const response = await apiClient.get('/admin/market-exchange-rates/', { params })
      return response
    } catch (error) {
      console.error('‚ùå Get market rates error:', error)
      throw error
    }
  },

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∫—É—Ä—Å–∞
   * @param {Object} rateData - –î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞
   * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω—ã–π –∫—É—Ä—Å
   */
  async createMarketRate(rateData) {
    try {
      const response = await apiClient.post('/admin/market-exchange-rates/', rateData)
      console.log('‚úÖ Market rate created successfully')
      return response
    } catch (error) {
      console.error('‚ùå Create market rate error:', error)
      throw error
    }
  },

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∫—É—Ä—Å–∞
 * @param {number} rateId - ID –∫—É—Ä—Å–∞
 * @param {Object} rateData - –î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞
 * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫—É—Ä—Å
 */
async updateMarketRate(rateId, rateData) {
  try {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const payload = {
      currency: rateData.currency, // ID –≤–∞–ª—é—Ç—ã
      buy: rateData.buy,
      sell: rateData.sell,
      is_active: rateData.is_active,
      notes: rateData.notes || ''
    }

    // –£–¥–∞–ª—è–µ–º –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∏–ª–∏ –ª–∏—à–Ω–∏–µ –ø–æ–ª—è
    const readonlyFields = ['date', 'time', 'added_by']
    readonlyFields.forEach(field => delete payload[field])

    // –£–¥–∞–ª—è–µ–º undefined/null
    Object.keys(payload).forEach(key => {
      if (payload[key] === undefined || payload[key] === null) {
        delete payload[key]
      }
    })

    console.log('üöÄ Updating market rate with payload:', payload)
    console.log('üìç Rate ID:', rateId)

    const response = await apiClient.patch(`/admin/market-exchange-rates/${rateId}/`, payload)
    console.log('‚úÖ Market rate updated successfully:', response.data)
    return response
  } catch (error) {
    console.error('‚ùå Update market rate error:', error)

    // –ü–æ–¥—Ä–æ–±–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (error.response) {
      console.error('üìã –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', error.response.status)
      console.error('üìã –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data)
      console.error('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error.response.headers)

      const enhancedError = new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∫—É—Ä—Å–∞')
      enhancedError.response = error.response
      enhancedError.data = error.response.data
      enhancedError.status = error.response.status
      throw enhancedError
    } else if (error.request) {
      console.error('üìã –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.request)
      throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞')
    } else {
      console.error('üìã –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message)
      throw error
    }
  }
},


  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∫—É—Ä—Å–∞
   * @param {number} rateId - ID –∫—É—Ä—Å–∞
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
   */
  async deleteMarketRate(rateId) {
    try {
      const response = await apiClient.delete(`/admin/market-exchange-rates/${rateId}/`)
      console.log('‚úÖ Market rate deleted successfully')
      return response
    } catch (error) {
      console.error('‚ùå Delete market rate error:', error)
      throw error
    }
  },

  // ==============================================
  // –ë–ê–ù–ö–û–í–°–ö–ò–ï –ö–£–†–°–´
  // ==============================================

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫—É—Ä—Å–æ–≤
   * @returns {Promise<Object>} –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫—É—Ä—Å—ã
   */
  async getBankRates() {
    try {
      const response = await apiClient.get('/public/bank-rates/')
      return response
    } catch (error) {
      console.error('‚ùå Get bank rates error:', error)
      throw error
    }
  },


  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã
   * @param {Object} settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
   * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   */
  async updateSettings(settings) {
    try {
      const response = await apiClient.patch('/admin/settings/', settings)
      console.log('‚úÖ Settings updated successfully')
      return response
    } catch (error) {
      console.error('‚ùå Update settings error:', error)
      throw error
    }
  }
}

export default adminAPI