from django.shortcuts import render, redirect
from django.contrib.auth import login
from .forms import CustomUserCreationForm
from .forms import CustomLoginForm  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à—É —Ñ–æ—Ä–º—É
from django.contrib.auth import authenticate
from django.contrib.auth.decorators import login_required
from .models import ExchangeRate, Bank, Currency  # –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –º–æ–¥–µ–ª—å Currency
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated, AllowAny
from rest_framework import status
from .serializers import CurrencySerializer, BankSerializer, ExchangeRateSerializer
from rest_framework import viewsets
from django.http import JsonResponse
from .currency_fetcher import fetch_all_currency_data
from django.core.cache import cache
from django.core.cache import cache

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç —Å —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
def currency_data_view(request):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        fetch_all_currency_data()

        # ‚ùó –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        cache.delete('exchange_rates_by_bank')

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        currencies = Currency.objects.all()
        data = CurrencySerializer(currencies, many=True).data
        return JsonResponse(data, safe=False)

    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

# –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
@login_required
def currency_list(request):
    banks = Bank.objects.all()
    data = {}

    for bank in banks:
        rates = ExchangeRate.objects.filter(bank=bank).select_related('currency').order_by('currency__code')
        if rates.exists():
            bank_data = {}
            for rate in rates:
                bank_data[rate.currency.code] = {
                    'buy': rate.buy,
                    'sell': rate.sell
                }
            data[bank.name] = bank_data  # –ò—Å–ø–æ–ª—å–∑—É–µ–º name, –∞ –Ω–µ code
        else:
            data[bank.name] = None

    return render(request, 'currency_list.html', {'data': data})

# –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            print("–§–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            form.save()
            return redirect('login')  # –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        else:
            print("–§–æ—Ä–º–∞ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞")
            print(form.errors)  # –í—ã–≤–æ–¥ –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    else:
        form = CustomUserCreationForm()

    return render(request, 'register.html', {'form': form})

# –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def custom_login(request):
    if request.method == "POST":
        form = CustomLoginForm(request, data=request.POST)
        if form.is_valid():
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(request, username=username, password=password)
            if user is not None:
                login(request, user)
                return redirect('/currencies/')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
            else:
                form.add_error(None, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
    else:
        form = CustomLoginForm()

    return render(request, 'login.html', {'form': form})

# –ü—Ä–∏–º–µ—Ä –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
class ProtectedView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        return Response({"message": "This is a protected view!"})

# –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç
class CurrencyList(APIView):
    def get(self, request):
        currencies = Currency.objects.all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞–ª—é—Ç—ã
        serializer = CurrencySerializer(currencies, many=True)  # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º
        return Response(serializer.data)

    def post(self, request):
        serializer = CurrencySerializer(data=request.data)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        if serializer.is_valid():
            serializer.save()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª—é—Ç—É
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

# ViewSet –¥–ª—è –≤–∞–ª—é—Ç
class CurrencyViewSet(viewsets.ModelViewSet):
    queryset = Currency.objects.all()
    serializer_class = CurrencySerializer

# –ù–æ–≤—ã–π API –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞–ª—é—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
class ExchangeRateFormattedView(APIView):
    def get(self, request):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (ExchangeRate)
        rates = ExchangeRate.objects.all().select_related('currency', 'bank').order_by('currency__code', 'bank__name')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
        if not rates:
            return Response({"message": "No exchange rates found in the database"}, status=status.HTTP_404_NOT_FOUND)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
        formatted = []
        for item in rates:
            currency = item.currency.code  # –ù–∞–ø—Ä–∏–º–µ—Ä, USD
            buy = item.buy  # –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
            sell = item.sell  # –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
            bank = item.bank.name  # –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞
            line = f"{currency} ‚Äî buy: {buy}, sell: {sell}, Source: {bank}"
            formatted.append(line)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        return Response({
            "message": "Exchange rates of all banks",
            "data": formatted
        })


# –ù–æ–≤—ã–π API: –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø–æ –±–∞–Ω–∫–∞–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä—è
class ExchangeRatesByBankView(APIView):
    permission_classes = [AllowAny]

    def get(self, request):
        cache_key = 'exchange_rates_by_bank'
        data = cache.get(cache_key)

        if not data:
            print("üîÑ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã...")
            banks = Bank.objects.all()
            result = {}

            for bank in banks:
                rates = ExchangeRate.objects.filter(bank=bank).select_related('currency')
                if rates.exists():
                    currency_data = {
                        rate.currency.code: {
                            "buy": rate.buy,
                            "sell": rate.sell
                        }
                        for rate in rates
                    }
                    result[bank.name] = currency_data
                else:
                    result[bank.name] = None

            data = result
            cache.set(cache_key, data, timeout=3600)  # –∫–µ—à–∏—Ä—É–µ–º –Ω–∞ 1 —á–∞—Å

        else:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞")

        return Response(data)

class BankViewSet(viewsets.ModelViewSet):
    queryset = Bank.objects.all()
    serializer_class = BankSerializer

class ExchangeRateViewSet(viewsets.ModelViewSet):
    queryset = ExchangeRate.objects.all().select_related('currency', 'bank')
    serializer_class = ExchangeRateSerializer